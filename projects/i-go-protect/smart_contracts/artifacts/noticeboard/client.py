# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "setup(uint64,uint64,uint64,uint64,address,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_validator_ad(pay,pay,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_validator_ad_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void": {
            "structs": {
                "val_config_man": {
                    "name": "ValConfigMan",
                    "elements": [
                        [
                            "hw_cat",
                            "uint64"
                        ],
                        [
                            "min_amt",
                            "uint64"
                        ],
                        [
                            "max_amt",
                            "uint64"
                        ],
                        [
                            "fee_setup",
                            "uint64"
                        ],
                        [
                            "fee_round",
                            "uint64"
                        ],
                        [
                            "deposit",
                            "uint64"
                        ],
                        [
                            "setup_rounds",
                            "uint64"
                        ],
                        [
                            "confirmation_rounds",
                            "uint64"
                        ],
                        [
                            "max_breach",
                            "uint64"
                        ],
                        [
                            "breach_rounds",
                            "uint64"
                        ],
                        [
                            "uptime_gar",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_validator_ad_extra((byte[30],byte[70]))void": {
            "structs": {
                "val_config_extra": {
                    "name": "ValConfigExtra",
                    "elements": [
                        [
                            "name",
                            "byte[30]"
                        ],
                        [
                            "link",
                            "byte[70]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "end_validator_ad()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "val_withdraw_earnings()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_balance()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_depoist()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "user_opt_in()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "create_delegator_contract(uint64,pay,pay,pay,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit_keys(address,byte[32],byte[32],byte[64],uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "confirm_keys(uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_generated(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_confirmed(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "end_expired_or_breached_delegator_contract(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "end_active_delegator_contract(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMubm90aWNlYm9hcmQuY29udHJhY3QuTm90aWNlYm9hcmQuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ub3RpY2Vib2FyZC9jb250cmFjdC5weTo0My00NAogICAgLy8gIyAtLS0tLS0tIFNtYXJ0IGNvbnRyYWN0IC0tLS0tLS0KICAgIC8vIGNsYXNzIE5vdGljZWJvYXJkKEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 6
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 4
        }
    },
    "schema": {
        "global": {
            "declared": {
                "blocked_amt": {
                    "type": "uint64",
                    "key": "blocked_amt"
                },
                "deposit_del_min": {
                    "type": "uint64",
                    "key": "deposit_del_min"
                },
                "deposit_val_min": {
                    "type": "uint64",
                    "key": "deposit_val_min"
                },
                "live": {
                    "type": "uint64",
                    "key": "live"
                },
                "manager": {
                    "type": "bytes",
                    "key": "manager"
                },
                "val_earn_factor": {
                    "type": "uint64",
                    "key": "val_earn_factor"
                },
                "val_factory_app_id": {
                    "type": "uint64",
                    "key": "val_factory_app_id"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "balance": {
                    "type": "uint64",
                    "key": "balance"
                },
                "del_app_id": {
                    "type": "uint64",
                    "key": "del_app_id"
                },
                "deposit_amt": {
                    "type": "uint64",
                    "key": "deposit_amt"
                },
                "val_app_id": {
                    "type": "uint64",
                    "key": "val_app_id"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "Noticeboard",
        "methods": [
            {
                "name": "setup",
                "args": [
                    {
                        "type": "uint64",
                        "name": "deposit_val_min"
                    },
                    {
                        "type": "uint64",
                        "name": "deposit_del_min"
                    },
                    {
                        "type": "uint64",
                        "name": "val_earn_factor"
                    },
                    {
                        "type": "uint64",
                        "name": "val_factory_app_id"
                    },
                    {
                        "type": "address",
                        "name": "manager"
                    },
                    {
                        "type": "pay",
                        "name": "mbr"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_validator_ad",
                "args": [
                    {
                        "type": "pay",
                        "name": "deposit"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_factory"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_val"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_validator_ad_mandatory",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                        "name": "val_config_man"
                    },
                    {
                        "type": "bool",
                        "name": "live"
                    },
                    {
                        "type": "address",
                        "name": "manager"
                    },
                    {
                        "type": "uint64",
                        "name": "max_del_cnt"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Creates or updates mandatory part of validator ad and sets liveliness status"
            },
            {
                "name": "set_validator_ad_extra",
                "args": [
                    {
                        "type": "(byte[30],byte[70])",
                        "name": "val_config_extra"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Creates or updates extra part of validator ad"
            },
            {
                "name": "end_validator_ad",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Sender can delete the validator ad."
            },
            {
                "name": "val_withdraw_earnings",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "withdraw_balance",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "withdraw_depoist",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "user_opt_in",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "assert not Txn.sender.is_opted_in(\nGlobal.current_application_id ), \"Account has already opted-in the app.\""
            },
            {
                "name": "create_delegator_contract",
                "args": [
                    {
                        "type": "uint64",
                        "name": "val_app_id"
                    },
                    {
                        "type": "pay",
                        "name": "deposit_payment"
                    },
                    {
                        "type": "pay",
                        "name": "fee_setup_payment"
                    },
                    {
                        "type": "pay",
                        "name": "mbr"
                    },
                    {
                        "type": "uint64",
                        "name": "round_start"
                    },
                    {
                        "type": "uint64",
                        "name": "round_end"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deposit_keys",
                "args": [
                    {
                        "type": "address",
                        "name": "del_acc"
                    },
                    {
                        "type": "byte[32]",
                        "name": "sel_key"
                    },
                    {
                        "type": "byte[32]",
                        "name": "vote_key"
                    },
                    {
                        "type": "byte[64]",
                        "name": "state_proof_key"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_key_dilution"
                    },
                    {
                        "type": "uint64",
                        "name": "round_start"
                    },
                    {
                        "type": "uint64",
                        "name": "round_end"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "confirm_keys",
                "args": [
                    {
                        "type": "uint64",
                        "name": "keyreg_txn_index"
                    },
                    {
                        "type": "pay",
                        "name": "fee_operation_payment"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "keys_not_generated",
                "args": [
                    {
                        "type": "address",
                        "name": "del_acc"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "keys_not_confirmed",
                "args": [
                    {
                        "type": "address",
                        "name": "del_acc"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "end_expired_or_breached_delegator_contract",
                "args": [
                    {
                        "type": "address",
                        "name": "del_acc"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Anyone can delete the delegator contract after its expiry or when it was breached."
            },
            {
                "name": "end_active_delegator_contract",
                "args": [
                    {
                        "type": "uint64",
                        "name": "keyreg_txn_index"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Delegator can withdraw from contract and get refunded remaining operational fee."
            }
        ],
        "networks": {},
        "desc": "\n    Platform for peer-to-peer consensus delegation.\n    Node runners, i.e. validators can post ads to offer their services to users.\n    Users, i.e. delegators, can open requests for the service and conclude a contract with a node runner.\n\n    Global state\n    ------------\n        Configuration parameters\n        ------------------------\n        deposit_val_min : UInt64\n            Minimum deposit required to be made by validator to the Noticeboard\n        deposit_del_min : UInt64\n            Minimum deposit required to be made by delegator to the Noticeboard\n        val_earn_factor : UInt64\n            Value scaled to (1-0), representing 1 - percentage of fees taken by the platform\n\n        Variables\n        ---------\n        live : bool\n            Whether the contract is live (true) or has ended (false)\n        blocked_amt : UInt64\n            Balance on the Noticeboard account that can't be withdrawn.\n            It is part either of active deposits or not finalized payments.\n\n    Local state\n    -----------\n        val_app_id : UInt64\n            GeneralValidatorAd ID of the asccount - either as owner of validator or selected validator for UserContract\n        del_app_id : UInt64\n            UserContract ID of the account if the account is user; equals 0 for validator accounts.\n        deposit_amt : UInt64\n            Amount the account has deposited in the Noticeboard\n\n    Boxes\n    -----\n        val_list : Box\n            {key = val_id, value = [val_app_id: UInt64, prev_val_id: UInt64, next_val_id: UInt64] }\n\n    Methods\n    -------\n\n    "
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class SetupArgs(_ArgsBase[None]):
    deposit_val_min: int
    deposit_del_min: int
    val_earn_factor: int
    val_factory_app_id: int
    manager: str
    mbr: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "setup(uint64,uint64,uint64,uint64,address,pay)void"


@dataclasses.dataclass(kw_only=True)
class CreateValidatorAdArgs(_ArgsBase[None]):
    deposit: TransactionWithSigner
    mbr_factory: TransactionWithSigner
    mbr_val: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "create_validator_ad(pay,pay,pay)void"


@dataclasses.dataclass(kw_only=True)
class ValConfigMan:
    hw_cat: int
    min_amt: int
    max_amt: int
    fee_setup: int
    fee_round: int
    deposit: int
    setup_rounds: int
    confirmation_rounds: int
    max_breach: int
    breach_rounds: int
    uptime_gar: int


@dataclasses.dataclass(kw_only=True)
class SetValidatorAdMandatoryArgs(_ArgsBase[None]):
    """Creates or updates mandatory part of validator ad and sets liveliness status"""

    val_config_man: ValConfigMan
    live: bool
    manager: str
    max_del_cnt: int

    @staticmethod
    def method() -> str:
        return "set_validator_ad_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void"


@dataclasses.dataclass(kw_only=True)
class ValConfigExtra:
    name: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    link: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]


@dataclasses.dataclass(kw_only=True)
class SetValidatorAdExtraArgs(_ArgsBase[None]):
    """Creates or updates extra part of validator ad"""

    val_config_extra: ValConfigExtra

    @staticmethod
    def method() -> str:
        return "set_validator_ad_extra((byte[30],byte[70]))void"


@dataclasses.dataclass(kw_only=True)
class EndValidatorAdArgs(_ArgsBase[None]):
    """Sender can delete the validator ad."""

    @staticmethod
    def method() -> str:
        return "end_validator_ad()void"


@dataclasses.dataclass(kw_only=True)
class ValWithdrawEarningsArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "val_withdraw_earnings()uint64"


@dataclasses.dataclass(kw_only=True)
class WithdrawBalanceArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "withdraw_balance()uint64"


@dataclasses.dataclass(kw_only=True)
class WithdrawDepoistArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "withdraw_depoist()uint64"


@dataclasses.dataclass(kw_only=True)
class CreateDelegatorContractArgs(_ArgsBase[None]):
    val_app_id: int
    deposit_payment: TransactionWithSigner
    fee_setup_payment: TransactionWithSigner
    mbr: TransactionWithSigner
    round_start: int
    round_end: int

    @staticmethod
    def method() -> str:
        return "create_delegator_contract(uint64,pay,pay,pay,uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class DepositKeysArgs(_ArgsBase[None]):
    del_acc: str
    sel_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    vote_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    state_proof_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    vote_key_dilution: int
    round_start: int
    round_end: int

    @staticmethod
    def method() -> str:
        return "deposit_keys(address,byte[32],byte[32],byte[64],uint64,uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class ConfirmKeysArgs(_ArgsBase[None]):
    keyreg_txn_index: int
    fee_operation_payment: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "confirm_keys(uint64,pay)void"


@dataclasses.dataclass(kw_only=True)
class KeysNotGeneratedArgs(_ArgsBase[None]):
    del_acc: str

    @staticmethod
    def method() -> str:
        return "keys_not_generated(address)void"


@dataclasses.dataclass(kw_only=True)
class KeysNotConfirmedArgs(_ArgsBase[None]):
    del_acc: str

    @staticmethod
    def method() -> str:
        return "keys_not_confirmed(address)void"


@dataclasses.dataclass(kw_only=True)
class EndExpiredOrBreachedDelegatorContractArgs(_ArgsBase[None]):
    """Anyone can delete the delegator contract after its expiry or when it was breached."""

    del_acc: str

    @staticmethod
    def method() -> str:
        return "end_expired_or_breached_delegator_contract(address)void"


@dataclasses.dataclass(kw_only=True)
class EndActiveDelegatorContractArgs(_ArgsBase[None]):
    """Delegator can withdraw from contract and get refunded remaining operational fee."""

    keyreg_txn_index: int

    @staticmethod
    def method() -> str:
        return "end_active_delegator_contract(uint64)void"


@dataclasses.dataclass(kw_only=True)
class UserOptInArgs(_ArgsBase[None]):
    """assert not Txn.sender.is_opted_in(
    Global.current_application_id ), "Account has already opted-in the app." """

    @staticmethod
    def method() -> str:
        return "user_opt_in()void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.blocked_amt = typing.cast(int, data.get(b"blocked_amt"))
        self.deposit_del_min = typing.cast(int, data.get(b"deposit_del_min"))
        self.deposit_val_min = typing.cast(int, data.get(b"deposit_val_min"))
        self.live = typing.cast(int, data.get(b"live"))
        self.manager = ByteReader(typing.cast(bytes, data.get(b"manager")))
        self.val_earn_factor = typing.cast(int, data.get(b"val_earn_factor"))
        self.val_factory_app_id = typing.cast(int, data.get(b"val_factory_app_id"))


class LocalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.balance = typing.cast(int, data.get(b"balance"))
        self.del_app_id = typing.cast(int, data.get(b"del_app_id"))
        self.deposit_amt = typing.cast(int, data.get(b"deposit_amt"))
        self.val_app_id = typing.cast(int, data.get(b"val_app_id"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def setup(
        self,
        *,
        deposit_val_min: int,
        deposit_del_min: int,
        val_earn_factor: int,
        val_factory_app_id: int,
        manager: str,
        mbr: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `setup(uint64,uint64,uint64,uint64,address,pay)void` ABI method
        
        :param int deposit_val_min: The `deposit_val_min` ABI parameter
        :param int deposit_del_min: The `deposit_del_min` ABI parameter
        :param int val_earn_factor: The `val_earn_factor` ABI parameter
        :param int val_factory_app_id: The `val_factory_app_id` ABI parameter
        :param str manager: The `manager` ABI parameter
        :param TransactionWithSigner mbr: The `mbr` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetupArgs(
            deposit_val_min=deposit_val_min,
            deposit_del_min=deposit_del_min,
            val_earn_factor=val_earn_factor,
            val_factory_app_id=val_factory_app_id,
            manager=manager,
            mbr=mbr,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_validator_ad(
        self,
        *,
        deposit: TransactionWithSigner,
        mbr_factory: TransactionWithSigner,
        mbr_val: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_validator_ad(pay,pay,pay)void` ABI method
        
        :param TransactionWithSigner deposit: The `deposit` ABI parameter
        :param TransactionWithSigner mbr_factory: The `mbr_factory` ABI parameter
        :param TransactionWithSigner mbr_val: The `mbr_val` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateValidatorAdArgs(
            deposit=deposit,
            mbr_factory=mbr_factory,
            mbr_val=mbr_val,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_validator_ad_mandatory(
        self,
        *,
        val_config_man: ValConfigMan,
        live: bool,
        manager: str,
        max_del_cnt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Creates or updates mandatory part of validator ad and sets liveliness status
        
        Adds a call to `set_validator_ad_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void` ABI method
        
        :param ValConfigMan val_config_man: The `val_config_man` ABI parameter
        :param bool live: The `live` ABI parameter
        :param str manager: The `manager` ABI parameter
        :param int max_del_cnt: The `max_del_cnt` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetValidatorAdMandatoryArgs(
            val_config_man=val_config_man,
            live=live,
            manager=manager,
            max_del_cnt=max_del_cnt,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_validator_ad_extra(
        self,
        *,
        val_config_extra: ValConfigExtra,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Creates or updates extra part of validator ad
        
        Adds a call to `set_validator_ad_extra((byte[30],byte[70]))void` ABI method
        
        :param ValConfigExtra val_config_extra: The `val_config_extra` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetValidatorAdExtraArgs(
            val_config_extra=val_config_extra,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def end_validator_ad(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sender can delete the validator ad.
        
        Adds a call to `end_validator_ad()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = EndValidatorAdArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def val_withdraw_earnings(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `val_withdraw_earnings()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ValWithdrawEarningsArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_balance(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `withdraw_balance()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawBalanceArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_depoist(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `withdraw_depoist()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawDepoistArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_delegator_contract(
        self,
        *,
        val_app_id: int,
        deposit_payment: TransactionWithSigner,
        fee_setup_payment: TransactionWithSigner,
        mbr: TransactionWithSigner,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_delegator_contract(uint64,pay,pay,pay,uint64,uint64)void` ABI method
        
        :param int val_app_id: The `val_app_id` ABI parameter
        :param TransactionWithSigner deposit_payment: The `deposit_payment` ABI parameter
        :param TransactionWithSigner fee_setup_payment: The `fee_setup_payment` ABI parameter
        :param TransactionWithSigner mbr: The `mbr` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateDelegatorContractArgs(
            val_app_id=val_app_id,
            deposit_payment=deposit_payment,
            fee_setup_payment=fee_setup_payment,
            mbr=mbr,
            round_start=round_start,
            round_end=round_end,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def deposit_keys(
        self,
        *,
        del_acc: str,
        sel_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        state_proof_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key_dilution: int,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `deposit_keys(address,byte[32],byte[32],byte[64],uint64,uint64,uint64)void` ABI method
        
        :param str del_acc: The `del_acc` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] sel_key: The `sel_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] vote_key: The `vote_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] state_proof_key: The `state_proof_key` ABI parameter
        :param int vote_key_dilution: The `vote_key_dilution` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DepositKeysArgs(
            del_acc=del_acc,
            sel_key=sel_key,
            vote_key=vote_key,
            state_proof_key=state_proof_key,
            vote_key_dilution=vote_key_dilution,
            round_start=round_start,
            round_end=round_end,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def confirm_keys(
        self,
        *,
        keyreg_txn_index: int,
        fee_operation_payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `confirm_keys(uint64,pay)void` ABI method
        
        :param int keyreg_txn_index: The `keyreg_txn_index` ABI parameter
        :param TransactionWithSigner fee_operation_payment: The `fee_operation_payment` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ConfirmKeysArgs(
            keyreg_txn_index=keyreg_txn_index,
            fee_operation_payment=fee_operation_payment,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_not_generated(
        self,
        *,
        del_acc: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `keys_not_generated(address)void` ABI method
        
        :param str del_acc: The `del_acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysNotGeneratedArgs(
            del_acc=del_acc,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_not_confirmed(
        self,
        *,
        del_acc: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `keys_not_confirmed(address)void` ABI method
        
        :param str del_acc: The `del_acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysNotConfirmedArgs(
            del_acc=del_acc,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def end_expired_or_breached_delegator_contract(
        self,
        *,
        del_acc: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Anyone can delete the delegator contract after its expiry or when it was breached.
        
        Adds a call to `end_expired_or_breached_delegator_contract(address)void` ABI method
        
        :param str del_acc: The `del_acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = EndExpiredOrBreachedDelegatorContractArgs(
            del_acc=del_acc,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def end_active_delegator_contract(
        self,
        *,
        keyreg_txn_index: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Delegator can withdraw from contract and get refunded remaining operational fee.
        
        Adds a call to `end_active_delegator_contract(uint64)void` ABI method
        
        :param int keyreg_txn_index: The `keyreg_txn_index` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = EndActiveDelegatorContractArgs(
            keyreg_txn_index=keyreg_txn_index,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def opt_in_user_opt_in(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """assert not Txn.sender.is_opted_in(
        Global.current_application_id ), "Account has already opted-in the app."
        
        Adds a call to `user_opt_in()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UserOptInArgs()
        self.app_client.compose_opt_in(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class NoticeboardClient:
    """
        Platform for peer-to-peer consensus delegation.
        Node runners, i.e. validators can post ads to offer their services to users.
        Users, i.e. delegators, can open requests for the service and conclude a contract with a node runner.
    
        Global state
        ------------
            Configuration parameters
            ------------------------
            deposit_val_min : UInt64
                Minimum deposit required to be made by validator to the Noticeboard
            deposit_del_min : UInt64
                Minimum deposit required to be made by delegator to the Noticeboard
            val_earn_factor : UInt64
                Value scaled to (1-0), representing 1 - percentage of fees taken by the platform
    
            Variables
            ---------
            live : bool
                Whether the contract is live (true) or has ended (false)
            blocked_amt : UInt64
                Balance on the Noticeboard account that can't be withdrawn.
                It is part either of active deposits or not finalized payments.
    
        Local state
        -----------
            val_app_id : UInt64
                GeneralValidatorAd ID of the asccount - either as owner of validator or selected validator for UserContract
            del_app_id : UInt64
                UserContract ID of the account if the account is user; equals 0 for validator accounts.
            deposit_amt : UInt64
                Amount the account has deposited in the Noticeboard
    
        Boxes
        -----
            val_list : Box
                {key = val_id, value = [val_app_id: UInt64, prev_val_id: UInt64, next_val_id: UInt64] }
    
        Methods
        -------
    
        
    
    A class for interacting with the Noticeboard app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        NoticeboardClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def get_local_state(self, account: str | None = None) -> LocalState:
        """Returns the application's local state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_local_state(account, raw=True))
        return LocalState(state)

    def setup(
        self,
        *,
        deposit_val_min: int,
        deposit_del_min: int,
        val_earn_factor: int,
        val_factory_app_id: int,
        manager: str,
        mbr: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `setup(uint64,uint64,uint64,uint64,address,pay)void` ABI method
        
        :param int deposit_val_min: The `deposit_val_min` ABI parameter
        :param int deposit_del_min: The `deposit_del_min` ABI parameter
        :param int val_earn_factor: The `val_earn_factor` ABI parameter
        :param int val_factory_app_id: The `val_factory_app_id` ABI parameter
        :param str manager: The `manager` ABI parameter
        :param TransactionWithSigner mbr: The `mbr` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetupArgs(
            deposit_val_min=deposit_val_min,
            deposit_del_min=deposit_del_min,
            val_earn_factor=val_earn_factor,
            val_factory_app_id=val_factory_app_id,
            manager=manager,
            mbr=mbr,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_validator_ad(
        self,
        *,
        deposit: TransactionWithSigner,
        mbr_factory: TransactionWithSigner,
        mbr_val: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `create_validator_ad(pay,pay,pay)void` ABI method
        
        :param TransactionWithSigner deposit: The `deposit` ABI parameter
        :param TransactionWithSigner mbr_factory: The `mbr_factory` ABI parameter
        :param TransactionWithSigner mbr_val: The `mbr_val` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CreateValidatorAdArgs(
            deposit=deposit,
            mbr_factory=mbr_factory,
            mbr_val=mbr_val,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_validator_ad_mandatory(
        self,
        *,
        val_config_man: ValConfigMan,
        live: bool,
        manager: str,
        max_del_cnt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Creates or updates mandatory part of validator ad and sets liveliness status
        
        Calls `set_validator_ad_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void` ABI method
        
        :param ValConfigMan val_config_man: The `val_config_man` ABI parameter
        :param bool live: The `live` ABI parameter
        :param str manager: The `manager` ABI parameter
        :param int max_del_cnt: The `max_del_cnt` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetValidatorAdMandatoryArgs(
            val_config_man=val_config_man,
            live=live,
            manager=manager,
            max_del_cnt=max_del_cnt,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_validator_ad_extra(
        self,
        *,
        val_config_extra: ValConfigExtra,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Creates or updates extra part of validator ad
        
        Calls `set_validator_ad_extra((byte[30],byte[70]))void` ABI method
        
        :param ValConfigExtra val_config_extra: The `val_config_extra` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetValidatorAdExtraArgs(
            val_config_extra=val_config_extra,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def end_validator_ad(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sender can delete the validator ad.
        
        Calls `end_validator_ad()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = EndValidatorAdArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def val_withdraw_earnings(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `val_withdraw_earnings()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = ValWithdrawEarningsArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_balance(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `withdraw_balance()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = WithdrawBalanceArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_depoist(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `withdraw_depoist()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = WithdrawDepoistArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_delegator_contract(
        self,
        *,
        val_app_id: int,
        deposit_payment: TransactionWithSigner,
        fee_setup_payment: TransactionWithSigner,
        mbr: TransactionWithSigner,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `create_delegator_contract(uint64,pay,pay,pay,uint64,uint64)void` ABI method
        
        :param int val_app_id: The `val_app_id` ABI parameter
        :param TransactionWithSigner deposit_payment: The `deposit_payment` ABI parameter
        :param TransactionWithSigner fee_setup_payment: The `fee_setup_payment` ABI parameter
        :param TransactionWithSigner mbr: The `mbr` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CreateDelegatorContractArgs(
            val_app_id=val_app_id,
            deposit_payment=deposit_payment,
            fee_setup_payment=fee_setup_payment,
            mbr=mbr,
            round_start=round_start,
            round_end=round_end,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def deposit_keys(
        self,
        *,
        del_acc: str,
        sel_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        state_proof_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key_dilution: int,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `deposit_keys(address,byte[32],byte[32],byte[64],uint64,uint64,uint64)void` ABI method
        
        :param str del_acc: The `del_acc` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] sel_key: The `sel_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] vote_key: The `vote_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] state_proof_key: The `state_proof_key` ABI parameter
        :param int vote_key_dilution: The `vote_key_dilution` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DepositKeysArgs(
            del_acc=del_acc,
            sel_key=sel_key,
            vote_key=vote_key,
            state_proof_key=state_proof_key,
            vote_key_dilution=vote_key_dilution,
            round_start=round_start,
            round_end=round_end,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def confirm_keys(
        self,
        *,
        keyreg_txn_index: int,
        fee_operation_payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `confirm_keys(uint64,pay)void` ABI method
        
        :param int keyreg_txn_index: The `keyreg_txn_index` ABI parameter
        :param TransactionWithSigner fee_operation_payment: The `fee_operation_payment` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ConfirmKeysArgs(
            keyreg_txn_index=keyreg_txn_index,
            fee_operation_payment=fee_operation_payment,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def keys_not_generated(
        self,
        *,
        del_acc: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `keys_not_generated(address)void` ABI method
        
        :param str del_acc: The `del_acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = KeysNotGeneratedArgs(
            del_acc=del_acc,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def keys_not_confirmed(
        self,
        *,
        del_acc: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `keys_not_confirmed(address)void` ABI method
        
        :param str del_acc: The `del_acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = KeysNotConfirmedArgs(
            del_acc=del_acc,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def end_expired_or_breached_delegator_contract(
        self,
        *,
        del_acc: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Anyone can delete the delegator contract after its expiry or when it was breached.
        
        Calls `end_expired_or_breached_delegator_contract(address)void` ABI method
        
        :param str del_acc: The `del_acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = EndExpiredOrBreachedDelegatorContractArgs(
            del_acc=del_acc,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def end_active_delegator_contract(
        self,
        *,
        keyreg_txn_index: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Delegator can withdraw from contract and get refunded remaining operational fee.
        
        Calls `end_active_delegator_contract(uint64)void` ABI method
        
        :param int keyreg_txn_index: The `keyreg_txn_index` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = EndActiveDelegatorContractArgs(
            keyreg_txn_index=keyreg_txn_index,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def opt_in_user_opt_in(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """assert not Txn.sender.is_opted_in(
        Global.current_application_id ), "Account has already opted-in the app."
        
        Calls `user_opt_in()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UserOptInArgs()
        result = self.app_client.opt_in(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
