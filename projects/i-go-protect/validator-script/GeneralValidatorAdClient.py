# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "create(address,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void": {
            "structs": {
                "val_config_man": {
                    "name": "ValConfigMan",
                    "elements": [
                        [
                            "hw_cat",
                            "uint64"
                        ],
                        [
                            "min_amt",
                            "uint64"
                        ],
                        [
                            "max_amt",
                            "uint64"
                        ],
                        [
                            "fee_setup",
                            "uint64"
                        ],
                        [
                            "fee_round",
                            "uint64"
                        ],
                        [
                            "deposit",
                            "uint64"
                        ],
                        [
                            "setup_rounds",
                            "uint64"
                        ],
                        [
                            "confirmation_rounds",
                            "uint64"
                        ],
                        [
                            "max_breach",
                            "uint64"
                        ],
                        [
                            "breach_rounds",
                            "uint64"
                        ],
                        [
                            "uptime_gar",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_extra((byte[30],byte[70]))void": {
            "structs": {
                "val_config_extra": {
                    "name": "ValConfigExtra",
                    "elements": [
                        [
                            "name",
                            "byte[30]"
                        ],
                        [
                            "link",
                            "byte[70]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "end_validator_ad()uint64": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "withdraw_earnings()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_generated(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_confirmed(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "end_delegator_contract(uint64)(uint64,uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "Struct3UInt64",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ],
                        [
                            "c",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZ2VuZXJhbF92YWxpZGF0b3JfYWQuY29udHJhY3QuR2VuZXJhbFZhbGlkYXRvckFkLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2VuZXJhbF92YWxpZGF0b3JfYWQvY29udHJhY3QucHk6NDktNTAKICAgIC8vICMgLS0tLS0tLSBTbWFydCBjb250cmFjdCAtLS0tLS0tCiAgICAvLyBjbGFzcyBHZW5lcmFsVmFsaWRhdG9yQWQoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 5,
            "num_uints": 8
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "del_cnt": {
                    "type": "uint64",
                    "key": "del_cnt"
                },
                "del_contracts": {
                    "type": "bytes",
                    "key": "del_contracts"
                },
                "live": {
                    "type": "uint64",
                    "key": "live"
                },
                "manager": {
                    "type": "bytes",
                    "key": "manager"
                },
                "max_del_cnt": {
                    "type": "uint64",
                    "key": "max_del_cnt"
                },
                "max_max_del_cnt": {
                    "type": "uint64",
                    "key": "max_max_del_cnt"
                },
                "noticeboard_app_id": {
                    "type": "uint64",
                    "key": "noticeboard_app_id"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "val_config_extra": {
                    "type": "bytes",
                    "key": "val_config_extra"
                },
                "val_config_man": {
                    "type": "bytes",
                    "key": "val_config_man"
                },
                "val_deposit": {
                    "type": "uint64",
                    "key": "val_deposit"
                },
                "val_earn_factor": {
                    "type": "uint64",
                    "key": "val_earn_factor"
                },
                "val_earnings": {
                    "type": "uint64",
                    "key": "val_earnings"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "GeneralValidatorAd",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "uint64",
                        "name": "noticeboard_app_id"
                    },
                    {
                        "type": "uint64",
                        "name": "val_earn_factor"
                    },
                    {
                        "type": "uint64",
                        "name": "deposit"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_mandatory",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                        "name": "val_config_man"
                    },
                    {
                        "type": "bool",
                        "name": "live"
                    },
                    {
                        "type": "address",
                        "name": "manager"
                    },
                    {
                        "type": "uint64",
                        "name": "max_del_cnt"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_extra",
                "args": [
                    {
                        "type": "(byte[30],byte[70])",
                        "name": "val_config_extra"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "end_validator_ad",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "withdraw_earnings",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "create_delegator_contract",
                "args": [
                    {
                        "type": "uint64",
                        "name": "deposit_payment_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "fee_setup_payment_amount"
                    },
                    {
                        "type": "address",
                        "name": "del_acc"
                    },
                    {
                        "type": "uint64",
                        "name": "round_start"
                    },
                    {
                        "type": "uint64",
                        "name": "round_end"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "deposit_keys",
                "args": [
                    {
                        "type": "account",
                        "name": "caller"
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_id"
                    },
                    {
                        "type": "byte[32]",
                        "name": "sel_key"
                    },
                    {
                        "type": "byte[32]",
                        "name": "vote_key"
                    },
                    {
                        "type": "byte[64]",
                        "name": "state_proof_key"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_key_dilution"
                    },
                    {
                        "type": "uint64",
                        "name": "round_start"
                    },
                    {
                        "type": "uint64",
                        "name": "round_end"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "confirm_keys",
                "args": [
                    {
                        "type": "uint64",
                        "name": "del_app_id"
                    },
                    {
                        "type": "uint64",
                        "name": "fee_operation_payment_amount"
                    },
                    {
                        "type": "byte[32]",
                        "name": "sel_key"
                    },
                    {
                        "type": "byte[32]",
                        "name": "vote_key"
                    },
                    {
                        "type": "byte[64]",
                        "name": "state_proof_key"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_key_dilution"
                    },
                    {
                        "type": "uint64",
                        "name": "round_start"
                    },
                    {
                        "type": "uint64",
                        "name": "round_end"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "keys_not_generated",
                "args": [
                    {
                        "type": "uint64",
                        "name": "del_app_id"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "keys_not_confirmed",
                "args": [
                    {
                        "type": "uint64",
                        "name": "del_app_id"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "end_delegator_contract",
                "args": [
                    {
                        "type": "uint64",
                        "name": "del_app_id"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64,uint64)"
                }
            }
        ],
        "networks": {},
        "desc": "\n    Ad of an validator to offer node running services to users.\n    Users, i.e. delegators, can open requests for the service and conclude an individual contract with this node runner.\n\n    Global state\n    ------------\n        Configuration parameters\n        ------------------------\n\n\n        Variables\n        ---------\n\n    Methods\n    -------\n\n    "
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class ValConfigMan:
    hw_cat: int
    min_amt: int
    max_amt: int
    fee_setup: int
    fee_round: int
    deposit: int
    setup_rounds: int
    confirmation_rounds: int
    max_breach: int
    breach_rounds: int
    uptime_gar: int


@dataclasses.dataclass(kw_only=True)
class SetMandatoryArgs(_ArgsBase[None]):
    val_config_man: ValConfigMan
    live: bool
    manager: str
    max_del_cnt: int

    @staticmethod
    def method() -> str:
        return "set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void"


@dataclasses.dataclass(kw_only=True)
class ValConfigExtra:
    name: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    link: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]


@dataclasses.dataclass(kw_only=True)
class SetExtraArgs(_ArgsBase[None]):
    val_config_extra: ValConfigExtra

    @staticmethod
    def method() -> str:
        return "set_extra((byte[30],byte[70]))void"


@dataclasses.dataclass(kw_only=True)
class WithdrawEarningsArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "withdraw_earnings()uint64"


@dataclasses.dataclass(kw_only=True)
class CreateDelegatorContractArgs(_ArgsBase[int]):
    deposit_payment_amount: int
    fee_setup_payment_amount: int
    del_acc: str
    round_start: int
    round_end: int

    @staticmethod
    def method() -> str:
        return "create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class DepositKeysArgs(_ArgsBase[int]):
    caller: str | bytes
    del_app_id: int
    sel_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    vote_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    state_proof_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    vote_key_dilution: int
    round_start: int
    round_end: int

    @staticmethod
    def method() -> str:
        return "deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class ConfirmKeysArgs(_ArgsBase[int]):
    del_app_id: int
    fee_operation_payment_amount: int
    sel_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    vote_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    state_proof_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    vote_key_dilution: int
    round_start: int
    round_end: int

    @staticmethod
    def method() -> str:
        return "confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class KeysNotGeneratedArgs(_ArgsBase[int]):
    del_app_id: int

    @staticmethod
    def method() -> str:
        return "keys_not_generated(uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class KeysNotConfirmedArgs(_ArgsBase[int]):
    del_app_id: int

    @staticmethod
    def method() -> str:
        return "keys_not_confirmed(uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class Struct3UInt64:
    a: int
    b: int
    c: int


@dataclasses.dataclass(kw_only=True)
class EndDelegatorContractArgs(_ArgsBase[Struct3UInt64]):
    del_app_id: int

    @staticmethod
    def method() -> str:
        return "end_delegator_contract(uint64)(uint64,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class CreateArgs(_ArgsBase[None]):
    owner: str
    noticeboard_app_id: int
    val_earn_factor: int
    deposit: int

    @staticmethod
    def method() -> str:
        return "create(address,uint64,uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class EndValidatorAdArgs(_ArgsBase[int]):
    @staticmethod
    def method() -> str:
        return "end_validator_ad()uint64"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.del_cnt = typing.cast(int, data.get(b"del_cnt"))
        self.del_contracts = ByteReader(typing.cast(bytes, data.get(b"del_contracts")))
        self.live = typing.cast(int, data.get(b"live"))
        self.manager = ByteReader(typing.cast(bytes, data.get(b"manager")))
        self.max_del_cnt = typing.cast(int, data.get(b"max_del_cnt"))
        self.max_max_del_cnt = typing.cast(int, data.get(b"max_max_del_cnt"))
        self.noticeboard_app_id = typing.cast(int, data.get(b"noticeboard_app_id"))
        self.owner = ByteReader(typing.cast(bytes, data.get(b"owner")))
        self.val_config_extra = ByteReader(typing.cast(bytes, data.get(b"val_config_extra")))
        self.val_config_man = ByteReader(typing.cast(bytes, data.get(b"val_config_man")))
        self.val_deposit = typing.cast(int, data.get(b"val_deposit"))
        self.val_earn_factor = typing.cast(int, data.get(b"val_earn_factor"))
        self.val_earnings = typing.cast(int, data.get(b"val_earnings"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def set_mandatory(
        self,
        *,
        val_config_man: ValConfigMan,
        live: bool,
        manager: str,
        max_del_cnt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void` ABI method
        
        :param ValConfigMan val_config_man: The `val_config_man` ABI parameter
        :param bool live: The `live` ABI parameter
        :param str manager: The `manager` ABI parameter
        :param int max_del_cnt: The `max_del_cnt` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetMandatoryArgs(
            val_config_man=val_config_man,
            live=live,
            manager=manager,
            max_del_cnt=max_del_cnt,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_extra(
        self,
        *,
        val_config_extra: ValConfigExtra,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `set_extra((byte[30],byte[70]))void` ABI method
        
        :param ValConfigExtra val_config_extra: The `val_config_extra` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetExtraArgs(
            val_config_extra=val_config_extra,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_earnings(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `withdraw_earnings()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawEarningsArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_delegator_contract(
        self,
        *,
        deposit_payment_amount: int,
        fee_setup_payment_amount: int,
        del_acc: str,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64` ABI method
        
        :param int deposit_payment_amount: The `deposit_payment_amount` ABI parameter
        :param int fee_setup_payment_amount: The `fee_setup_payment_amount` ABI parameter
        :param str del_acc: The `del_acc` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateDelegatorContractArgs(
            deposit_payment_amount=deposit_payment_amount,
            fee_setup_payment_amount=fee_setup_payment_amount,
            del_acc=del_acc,
            round_start=round_start,
            round_end=round_end,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def deposit_keys(
        self,
        *,
        caller: str | bytes,
        del_app_id: int,
        sel_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        state_proof_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key_dilution: int,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64` ABI method
        
        :param str | bytes caller: The `caller` ABI parameter
        :param int del_app_id: The `del_app_id` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] sel_key: The `sel_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] vote_key: The `vote_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] state_proof_key: The `state_proof_key` ABI parameter
        :param int vote_key_dilution: The `vote_key_dilution` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DepositKeysArgs(
            caller=caller,
            del_app_id=del_app_id,
            sel_key=sel_key,
            vote_key=vote_key,
            state_proof_key=state_proof_key,
            vote_key_dilution=vote_key_dilution,
            round_start=round_start,
            round_end=round_end,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def confirm_keys(
        self,
        *,
        del_app_id: int,
        fee_operation_payment_amount: int,
        sel_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        state_proof_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key_dilution: int,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64` ABI method
        
        :param int del_app_id: The `del_app_id` ABI parameter
        :param int fee_operation_payment_amount: The `fee_operation_payment_amount` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] sel_key: The `sel_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] vote_key: The `vote_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] state_proof_key: The `state_proof_key` ABI parameter
        :param int vote_key_dilution: The `vote_key_dilution` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ConfirmKeysArgs(
            del_app_id=del_app_id,
            fee_operation_payment_amount=fee_operation_payment_amount,
            sel_key=sel_key,
            vote_key=vote_key,
            state_proof_key=state_proof_key,
            vote_key_dilution=vote_key_dilution,
            round_start=round_start,
            round_end=round_end,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_not_generated(
        self,
        *,
        del_app_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `keys_not_generated(uint64)uint64` ABI method
        
        :param int del_app_id: The `del_app_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysNotGeneratedArgs(
            del_app_id=del_app_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_not_confirmed(
        self,
        *,
        del_app_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `keys_not_confirmed(uint64)uint64` ABI method
        
        :param int del_app_id: The `del_app_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysNotConfirmedArgs(
            del_app_id=del_app_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def end_delegator_contract(
        self,
        *,
        del_app_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `end_delegator_contract(uint64)(uint64,uint64,uint64)` ABI method
        
        :param int del_app_id: The `del_app_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = EndDelegatorContractArgs(
            del_app_id=del_app_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_create(
        self,
        *,
        owner: str,
        noticeboard_app_id: int,
        val_earn_factor: int,
        deposit: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create(address,uint64,uint64,uint64)void` ABI method
        
        :param str owner: The `owner` ABI parameter
        :param int noticeboard_app_id: The `noticeboard_app_id` ABI parameter
        :param int val_earn_factor: The `val_earn_factor` ABI parameter
        :param int deposit: The `deposit` ABI parameter
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArgs(
            owner=owner,
            noticeboard_app_id=noticeboard_app_id,
            val_earn_factor=val_earn_factor,
            deposit=deposit,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_end_validator_ad(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `end_validator_ad()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = EndValidatorAdArgs()
        self.app_client.compose_delete(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class GeneralValidatorAdClient:
    """
        Ad of an validator to offer node running services to users.
        Users, i.e. delegators, can open requests for the service and conclude an individual contract with this node runner.
    
        Global state
        ------------
            Configuration parameters
            ------------------------
    
    
            Variables
            ---------
    
        Methods
        -------
    
        
    
    A class for interacting with the GeneralValidatorAd app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        GeneralValidatorAdClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def set_mandatory(
        self,
        *,
        val_config_man: ValConfigMan,
        live: bool,
        manager: str,
        max_del_cnt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void` ABI method
        
        :param ValConfigMan val_config_man: The `val_config_man` ABI parameter
        :param bool live: The `live` ABI parameter
        :param str manager: The `manager` ABI parameter
        :param int max_del_cnt: The `max_del_cnt` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetMandatoryArgs(
            val_config_man=val_config_man,
            live=live,
            manager=manager,
            max_del_cnt=max_del_cnt,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_extra(
        self,
        *,
        val_config_extra: ValConfigExtra,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `set_extra((byte[30],byte[70]))void` ABI method
        
        :param ValConfigExtra val_config_extra: The `val_config_extra` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetExtraArgs(
            val_config_extra=val_config_extra,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_earnings(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `withdraw_earnings()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = WithdrawEarningsArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_delegator_contract(
        self,
        *,
        deposit_payment_amount: int,
        fee_setup_payment_amount: int,
        del_acc: str,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64` ABI method
        
        :param int deposit_payment_amount: The `deposit_payment_amount` ABI parameter
        :param int fee_setup_payment_amount: The `fee_setup_payment_amount` ABI parameter
        :param str del_acc: The `del_acc` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = CreateDelegatorContractArgs(
            deposit_payment_amount=deposit_payment_amount,
            fee_setup_payment_amount=fee_setup_payment_amount,
            del_acc=del_acc,
            round_start=round_start,
            round_end=round_end,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def deposit_keys(
        self,
        *,
        caller: str | bytes,
        del_app_id: int,
        sel_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        state_proof_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key_dilution: int,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64` ABI method
        
        :param str | bytes caller: The `caller` ABI parameter
        :param int del_app_id: The `del_app_id` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] sel_key: The `sel_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] vote_key: The `vote_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] state_proof_key: The `state_proof_key` ABI parameter
        :param int vote_key_dilution: The `vote_key_dilution` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = DepositKeysArgs(
            caller=caller,
            del_app_id=del_app_id,
            sel_key=sel_key,
            vote_key=vote_key,
            state_proof_key=state_proof_key,
            vote_key_dilution=vote_key_dilution,
            round_start=round_start,
            round_end=round_end,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def confirm_keys(
        self,
        *,
        del_app_id: int,
        fee_operation_payment_amount: int,
        sel_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        state_proof_key: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        vote_key_dilution: int,
        round_start: int,
        round_end: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64` ABI method
        
        :param int del_app_id: The `del_app_id` ABI parameter
        :param int fee_operation_payment_amount: The `fee_operation_payment_amount` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] sel_key: The `sel_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] vote_key: The `vote_key` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] state_proof_key: The `state_proof_key` ABI parameter
        :param int vote_key_dilution: The `vote_key_dilution` ABI parameter
        :param int round_start: The `round_start` ABI parameter
        :param int round_end: The `round_end` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = ConfirmKeysArgs(
            del_app_id=del_app_id,
            fee_operation_payment_amount=fee_operation_payment_amount,
            sel_key=sel_key,
            vote_key=vote_key,
            state_proof_key=state_proof_key,
            vote_key_dilution=vote_key_dilution,
            round_start=round_start,
            round_end=round_end,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def keys_not_generated(
        self,
        *,
        del_app_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `keys_not_generated(uint64)uint64` ABI method
        
        :param int del_app_id: The `del_app_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = KeysNotGeneratedArgs(
            del_app_id=del_app_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def keys_not_confirmed(
        self,
        *,
        del_app_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `keys_not_confirmed(uint64)uint64` ABI method
        
        :param int del_app_id: The `del_app_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = KeysNotConfirmedArgs(
            del_app_id=del_app_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def end_delegator_contract(
        self,
        *,
        del_app_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Struct3UInt64]:
        """Calls `end_delegator_contract(uint64)(uint64,uint64,uint64)` ABI method
        
        :param int del_app_id: The `del_app_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Struct3UInt64]: The result of the transaction"""

        args = EndDelegatorContractArgs(
            del_app_id=del_app_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Struct3UInt64(**result_dict)
        return result

    def create_create(
        self,
        *,
        owner: str,
        noticeboard_app_id: int,
        val_earn_factor: int,
        deposit: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `create(address,uint64,uint64,uint64)void` ABI method
        
        :param str owner: The `owner` ABI parameter
        :param int noticeboard_app_id: The `noticeboard_app_id` ABI parameter
        :param int val_earn_factor: The `val_earn_factor` ABI parameter
        :param int deposit: The `deposit` ABI parameter
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CreateArgs(
            owner=owner,
            noticeboard_app_id=noticeboard_app_id,
            val_earn_factor=val_earn_factor,
            deposit=deposit,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_end_validator_ad(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Calls `end_validator_ad()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = EndValidatorAdArgs()
        result = self.app_client.delete(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[CreateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: Deploy[EndValidatorAdArgs],
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[CreateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param Deploy[EndValidatorAdArgs] delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
    