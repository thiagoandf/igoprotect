/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type {
  SendTransactionFrom,
  SendTransactionParams,
  SendTransactionResult,
  TransactionToSign,
} from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, AtomicTransactionComposer, OnApplicationComplete, Transaction, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  hints: {
    'create(address,uint64,uint64,uint64)void': {
      call_config: {
        no_op: 'CREATE',
      },
    },
    'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void': {
      call_config: {
        no_op: 'CALL',
      },
      structs: {
        val_config_man: {
          name: 'ValConfigMan',
          elements: [
            ['hw_cat', 'uint64'],
            ['min_amt', 'uint64'],
            ['max_amt', 'uint64'],
            ['fee_setup', 'uint64'],
            ['fee_round', 'uint64'],
            ['deposit', 'uint64'],
            ['setup_rounds', 'uint64'],
            ['confirmation_rounds', 'uint64'],
            ['max_breach', 'uint64'],
            ['breach_rounds', 'uint64'],
            ['uptime_gar', 'uint64'],
          ],
        },
      },
    },
    'set_extra((byte[30],byte[70]))void': {
      call_config: {
        no_op: 'CALL',
      },
      structs: {
        val_config_extra: {
          name: 'ValConfigExtra',
          elements: [
            ['name', 'byte[30]'],
            ['link', 'byte[70]'],
          ],
        },
      },
    },
    'deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'keys_not_generated()(uint64,uint64)': {
      call_config: {
        delete_application: 'CALL',
      },
      structs: {
        output: {
          name: 'Struct2UInt64',
          elements: [
            ['a', 'uint64'],
            ['b', 'uint64'],
          ],
        },
      },
    },
    'keys_not_confirmed()(uint64,uint64)': {
      call_config: {
        delete_application: 'CALL',
      },
      structs: {
        output: {
          name: 'Struct2UInt64',
          elements: [
            ['a', 'uint64'],
            ['b', 'uint64'],
          ],
        },
      },
    },
    'end_contract()(uint64,uint64,uint64)': {
      call_config: {
        delete_application: 'CALL',
      },
      structs: {
        output: {
          name: 'Struct3UInt64',
          elements: [
            ['a', 'uint64'],
            ['b', 'uint64'],
            ['c', 'uint64'],
          ],
        },
      },
    },
    'stake_limit_breach()bool': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'dereg_breach()bool': {
      call_config: {
        no_op: 'CALL',
      },
    },
  },
  source: {
    approval:
      '',
    clear:
      'I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZGVsZWdhdG9yX2NvbnRyYWN0LmNvbnRyYWN0LkRlbGVnYXRvckNvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvZGVsZWdhdG9yX2NvbnRyYWN0L2NvbnRyYWN0LnB5OjI3LTI4CiAgICAvLyAjIC0tLS0tLS0gU21hcnQgY29udHJhY3QgLS0tLS0tLQogICAgLy8gY2xhc3MgRGVsZWdhdG9yQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K',
  },
  state: {
    global: {
      num_byte_slices: 6,
      num_uints: 10,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {
        contract_breached: {
          type: 'uint64',
          key: 'contract_breached',
        },
        del_acc: {
          type: 'bytes',
          key: 'del_acc',
        },
        keys_confirmed: {
          type: 'uint64',
          key: 'keys_confirmed',
        },
        last_breach_round: {
          type: 'uint64',
          key: 'last_breach_round',
        },
        noticeboard_app_id: {
          type: 'uint64',
          key: 'noticeboard_app_id',
        },
        num_breach: {
          type: 'uint64',
          key: 'num_breach',
        },
        part_keys_deposited: {
          type: 'uint64',
          key: 'part_keys_deposited',
        },
        round_end: {
          type: 'uint64',
          key: 'round_end',
        },
        round_start: {
          type: 'uint64',
          key: 'round_start',
        },
        sel_key: {
          type: 'bytes',
          key: 'sel_key',
        },
        state_proof_key: {
          type: 'bytes',
          key: 'state_proof_key',
        },
        val_app_id: {
          type: 'uint64',
          key: 'val_app_id',
        },
        val_config_extra: {
          type: 'bytes',
          key: 'val_config_extra',
        },
        val_config_man: {
          type: 'bytes',
          key: 'val_config_man',
        },
        vote_key: {
          type: 'bytes',
          key: 'vote_key',
        },
        vote_key_dilution: {
          type: 'uint64',
          key: 'vote_key_dilution',
        },
      },
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: 'DelegatorContract',
    desc: '\n    Contract between a user, i.e. delegator, and node runner, i.e. valdiator, for the latter to participate in consensus\n    on the behalf of the user for specific amount of time and for a specific fee.\n    The contract terms are defined in this contract.\n\n    Global state\n    ------------\n        Configuration parameters\n        ------------------------\n\n\n        Variables\n        ---------\n\n    Methods\n    -------\n\n    ',
    methods: [
      {
        name: 'create',
        args: [
          {
            type: 'address',
            name: 'del_acc',
          },
          {
            type: 'uint64',
            name: 'noticeboard_app_id',
          },
          {
            type: 'uint64',
            name: 'round_start',
          },
          {
            type: 'uint64',
            name: 'round_end',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'set_mandatory',
        args: [
          {
            type: '(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)',
            name: 'val_config_man',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'set_extra',
        args: [
          {
            type: '(byte[30],byte[70])',
            name: 'val_config_extra',
          },
        ],
        returns: {
          type: 'void',
        },
      },
      {
        name: 'deposit_keys',
        args: [
          {
            type: 'byte[32]',
            name: 'sel_key',
          },
          {
            type: 'byte[32]',
            name: 'vote_key',
          },
          {
            type: 'byte[64]',
            name: 'state_proof_key',
          },
          {
            type: 'uint64',
            name: 'vote_key_dilution',
          },
          {
            type: 'uint64',
            name: 'round_start',
          },
          {
            type: 'uint64',
            name: 'round_end',
          },
        ],
        returns: {
          type: 'uint64',
        },
      },
      {
        name: 'confirm_keys',
        args: [
          {
            type: 'uint64',
            name: 'fee_operation_payment_amount',
          },
          {
            type: 'byte[32]',
            name: 'sel_key',
          },
          {
            type: 'byte[32]',
            name: 'vote_key',
          },
          {
            type: 'byte[64]',
            name: 'state_proof_key',
          },
          {
            type: 'uint64',
            name: 'vote_key_dilution',
          },
          {
            type: 'uint64',
            name: 'round_start',
          },
          {
            type: 'uint64',
            name: 'round_end',
          },
        ],
        returns: {
          type: 'uint64',
        },
      },
      {
        name: 'keys_not_generated',
        args: [],
        returns: {
          type: '(uint64,uint64)',
        },
      },
      {
        name: 'keys_not_confirmed',
        args: [],
        returns: {
          type: '(uint64,uint64)',
        },
      },
      {
        name: 'end_contract',
        args: [],
        returns: {
          type: '(uint64,uint64,uint64)',
        },
      },
      {
        name: 'stake_limit_breach',
        args: [],
        returns: {
          type: 'bool',
        },
        desc: 'Anyone can trigger storing of a stake limit breach event.',
      },
      {
        name: 'dereg_breach',
        args: [],
        returns: {
          type: 'bool',
        },
        desc: 'Work in progress',
      },
    ],
    networks: {},
  },
  bare_call_config: {},
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<
    SendTransactionParams,
    'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'
  >
}
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'
>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the DelegatorContract smart contract.
 */
export type DelegatorContract = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    'create(address,uint64,uint64,uint64)void' | 'create',
    {
      argsObj: {
        delAcc: string
        noticeboardAppId: bigint | number
        roundStart: bigint | number
        roundEnd: bigint | number
      }
      argsTuple: [delAcc: string, noticeboardAppId: bigint | number, roundStart: bigint | number, roundEnd: bigint | number]
      returns: void
    }
  > &
    Record<
      'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void' | 'set_mandatory',
      {
        argsObj: {
          valConfigMan: [
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
          ]
        }
        argsTuple: [
          valConfigMan: [
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
            bigint | number,
          ],
        ]
        returns: void
      }
    > &
    Record<
      'set_extra((byte[30],byte[70]))void' | 'set_extra',
      {
        argsObj: {
          valConfigExtra: [Uint8Array, Uint8Array]
        }
        argsTuple: [valConfigExtra: [Uint8Array, Uint8Array]]
        returns: void
      }
    > &
    Record<
      'deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64' | 'deposit_keys',
      {
        argsObj: {
          selKey: Uint8Array
          voteKey: Uint8Array
          stateProofKey: Uint8Array
          voteKeyDilution: bigint | number
          roundStart: bigint | number
          roundEnd: bigint | number
        }
        argsTuple: [
          selKey: Uint8Array,
          voteKey: Uint8Array,
          stateProofKey: Uint8Array,
          voteKeyDilution: bigint | number,
          roundStart: bigint | number,
          roundEnd: bigint | number,
        ]
        returns: bigint
      }
    > &
    Record<
      'confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64' | 'confirm_keys',
      {
        argsObj: {
          feeOperationPaymentAmount: bigint | number
          selKey: Uint8Array
          voteKey: Uint8Array
          stateProofKey: Uint8Array
          voteKeyDilution: bigint | number
          roundStart: bigint | number
          roundEnd: bigint | number
        }
        argsTuple: [
          feeOperationPaymentAmount: bigint | number,
          selKey: Uint8Array,
          voteKey: Uint8Array,
          stateProofKey: Uint8Array,
          voteKeyDilution: bigint | number,
          roundStart: bigint | number,
          roundEnd: bigint | number,
        ]
        returns: bigint
      }
    > &
    Record<
      'keys_not_generated()(uint64,uint64)' | 'keys_not_generated',
      {
        argsObj: {}
        argsTuple: []
        returns: Struct2UInt64
      }
    > &
    Record<
      'keys_not_confirmed()(uint64,uint64)' | 'keys_not_confirmed',
      {
        argsObj: {}
        argsTuple: []
        returns: Struct2UInt64
      }
    > &
    Record<
      'end_contract()(uint64,uint64,uint64)' | 'end_contract',
      {
        argsObj: {}
        argsTuple: []
        returns: Struct3UInt64
      }
    > &
    Record<
      'stake_limit_breach()bool' | 'stake_limit_breach',
      {
        argsObj: {}
        argsTuple: []
        returns: boolean
      }
    > &
    Record<
      'dereg_breach()bool' | 'dereg_breach',
      {
        argsObj: {}
        argsTuple: []
        returns: boolean
      }
    >
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractBreached?: IntegerState
      delAcc?: BinaryState
      keysConfirmed?: IntegerState
      lastBreachRound?: IntegerState
      noticeboardAppId?: IntegerState
      numBreach?: IntegerState
      partKeysDeposited?: IntegerState
      roundEnd?: IntegerState
      roundStart?: IntegerState
      selKey?: BinaryState
      stateProofKey?: BinaryState
      valAppId?: IntegerState
      valConfigExtra?: BinaryState
      valConfigMan?: BinaryState
      voteKey?: BinaryState
      voteKeyDilution?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type DelegatorContractSig = keyof DelegatorContract['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DelegatorContractSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams &
  CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a ValConfigMan result as a struct
 */
export type ValConfigMan = {
  hwCat: bigint
  minAmt: bigint
  maxAmt: bigint
  feeSetup: bigint
  feeRound: bigint
  deposit: bigint
  setupRounds: bigint
  confirmationRounds: bigint
  maxBreach: bigint
  breachRounds: bigint
  uptimeGar: bigint
}
/**
 * Converts the tuple representation of a ValConfigMan to the struct representation
 */
export function ValConfigMan([
  hwCat,
  minAmt,
  maxAmt,
  feeSetup,
  feeRound,
  deposit,
  setupRounds,
  confirmationRounds,
  maxBreach,
  breachRounds,
  uptimeGar,
]: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return {
    hwCat,
    minAmt,
    maxAmt,
    feeSetup,
    feeRound,
    deposit,
    setupRounds,
    confirmationRounds,
    maxBreach,
    breachRounds,
    uptimeGar,
  }
}
/**
 * Represents a ValConfigExtra result as a struct
 */
export type ValConfigExtra = {
  name: Uint8Array
  link: Uint8Array
}
/**
 * Converts the tuple representation of a ValConfigExtra to the struct representation
 */
export function ValConfigExtra([name, link]: [Uint8Array, Uint8Array]) {
  return {
    name,
    link,
  }
}
/**
 * Represents a Struct2UInt64 result as a struct
 */
export type Struct2UInt64 = {
  a: bigint
  b: bigint
}
/**
 * Converts the tuple representation of a Struct2UInt64 to the struct representation
 */
export function Struct2UInt64([a, b]: [bigint, bigint]) {
  return {
    a,
    b,
  }
}
/**
 * Represents a Struct3UInt64 result as a struct
 */
export type Struct3UInt64 = {
  a: bigint
  b: bigint
  c: bigint
}
/**
 * Converts the tuple representation of a Struct3UInt64 to the struct representation
 */
export function Struct3UInt64([a, b, c]: [bigint, bigint, bigint]) {
  return {
    a,
    b,
    c,
  }
}
/**
 * Maps a method signature from the DelegatorContract smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DelegatorContractSig> = DelegatorContract['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DelegatorContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DelegatorContractSig> = DelegatorContract['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DelegatorContractCreateCalls = (typeof DelegatorContractCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DelegatorContractCreateCallParams = TypedCallParams<'create(address,uint64,uint64,uint64)void'> & OnCompleteNoOp
/**
 * A factory for available 'delete' calls
 */
export type DelegatorContractDeleteCalls = (typeof DelegatorContractCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type DelegatorContractDeleteCallParams =
  | TypedCallParams<'keys_not_generated()(uint64,uint64)'>
  | TypedCallParams<'keys_not_confirmed()(uint64,uint64)'>
  | TypedCallParams<'end_contract()(uint64,uint64,uint64)'>
/**
 * Defines arguments required for the deploy method.
 */
export type DelegatorContractDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DelegatorContractCreateCalls) => DelegatorContractCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: DelegatorContractDeleteCalls) => DelegatorContractDeleteCallParams
}

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DelegatorContractCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DelegatorContract smart contract using the create(address,uint64,uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(
        args: MethodArgs<'create(address,uint64,uint64,uint64)void'>,
        params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & OnCompleteNoOp = {},
      ) {
        return {
          method: 'create(address,uint64,uint64,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.delAcc, args.noticeboardAppId, args.roundStart, args.roundEnd],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the DelegatorContract smart contract using the keys_not_generated()(uint64,uint64) ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      keysNotGenerated(args: MethodArgs<'keys_not_generated()(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'keys_not_generated()(uint64,uint64)' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
      /**
       * Constructs a delete call for the DelegatorContract smart contract using the keys_not_confirmed()(uint64,uint64) ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      keysNotConfirmed(args: MethodArgs<'keys_not_confirmed()(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'keys_not_confirmed()(uint64,uint64)' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
      /**
       * Constructs a delete call for the DelegatorContract smart contract using the end_contract()(uint64,uint64,uint64) ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      endContract(args: MethodArgs<'end_contract()(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'end_contract()(uint64,uint64,uint64)' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setMandatory(
    args: MethodArgs<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valConfigMan],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_extra((byte[30],byte[70]))void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setExtra(args: MethodArgs<'set_extra((byte[30],byte[70]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_extra((byte[30],byte[70]))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valConfigExtra],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static depositKeys(
    args: MethodArgs<'deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.selKey, args.voteKey, args.stateProofKey, args.voteKeyDilution, args.roundStart, args.roundEnd],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static confirmKeys(
    args: MethodArgs<'confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: 'confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args)
        ? args
        : [
            args.feeOperationPaymentAmount,
            args.selKey,
            args.voteKey,
            args.stateProofKey,
            args.voteKeyDilution,
            args.roundStart,
            args.roundEnd,
          ],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stake_limit_breach()bool ABI method
   *
   * Anyone can trigger storing of a stake limit breach event.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stakeLimitBreach(args: MethodArgs<'stake_limit_breach()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stake_limit_breach()bool' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the dereg_breach()bool ABI method
   *
   * Work in progress
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deregBreach(args: MethodArgs<'dereg_breach()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'dereg_breach()bool' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DelegatorContract smart contract
 */
export class DelegatorContractClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DelegatorContractClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(
    appDetails: AppDetails,
    private algod: Algodv2,
  ) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod,
    )
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue =
      result.return?.returnValue !== undefined && returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined)
    return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof DelegatorContract['methods']>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>,
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DelegatorContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: DelegatorContractDeployArgs & AppClientDeployCoreParams & IncludeSchema = {},
  ): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DelegatorContractCallFactory.create)
    const deleteArgs = params.deleteCall?.(DelegatorContractCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DelegatorContract smart contract using the create(address,uint64,uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(
        args: MethodArgs<'create(address,uint64,uint64,uint64)void'>,
        params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & OnCompleteNoOp = {},
      ) {
        return $this.mapReturnValue<MethodReturn<'create(address,uint64,uint64,uint64)void'>, AppCreateCallTransactionResult>(
          await $this.appClient.create(DelegatorContractCallFactory.create.create(args, params)),
        )
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the DelegatorContract smart contract using the keys_not_generated()(uint64,uint64) ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async keysNotGenerated(
        args: MethodArgs<'keys_not_generated()(uint64,uint64)'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {},
      ) {
        return $this.mapReturnValue<MethodReturn<'keys_not_generated()(uint64,uint64)'>>(
          await $this.appClient.delete(DelegatorContractCallFactory.delete.keysNotGenerated(args, params)),
        )
      },
      /**
       * Deletes an existing instance of the DelegatorContract smart contract using the keys_not_confirmed()(uint64,uint64) ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async keysNotConfirmed(
        args: MethodArgs<'keys_not_confirmed()(uint64,uint64)'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {},
      ) {
        return $this.mapReturnValue<MethodReturn<'keys_not_confirmed()(uint64,uint64)'>>(
          await $this.appClient.delete(DelegatorContractCallFactory.delete.keysNotConfirmed(args, params)),
        )
      },
      /**
       * Deletes an existing instance of the DelegatorContract smart contract using the end_contract()(uint64,uint64,uint64) ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async endContract(args: MethodArgs<'end_contract()(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'end_contract()(uint64,uint64,uint64)'>>(
          await $this.appClient.delete(DelegatorContractCallFactory.delete.endContract(args, params)),
        )
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DelegatorContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setMandatory(
    args: MethodArgs<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(DelegatorContractCallFactory.setMandatory(args, params))
  }

  /**
   * Calls the set_extra((byte[30],byte[70]))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setExtra(args: MethodArgs<'set_extra((byte[30],byte[70]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.setExtra(args, params))
  }

  /**
   * Calls the deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public depositKeys(
    args: MethodArgs<'deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(DelegatorContractCallFactory.depositKeys(args, params))
  }

  /**
   * Calls the confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public confirmKeys(
    args: MethodArgs<'confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(DelegatorContractCallFactory.confirmKeys(args, params))
  }

  /**
   * Calls the stake_limit_breach()bool ABI method.
   *
   * Anyone can trigger storing of a stake limit breach event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stakeLimitBreach(args: MethodArgs<'stake_limit_breach()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.stakeLimitBreach(args, params))
  }

  /**
   * Calls the dereg_breach()bool ABI method.
   *
   * Work in progress
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deregBreach(args: MethodArgs<'dereg_breach()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.deregBreach(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value)) throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      },
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value) throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<DelegatorContract['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractBreached() {
        return DelegatorContractClient.getIntegerState(state, 'contract_breached')
      },
      get delAcc() {
        return DelegatorContractClient.getBinaryState(state, 'del_acc')
      },
      get keysConfirmed() {
        return DelegatorContractClient.getIntegerState(state, 'keys_confirmed')
      },
      get lastBreachRound() {
        return DelegatorContractClient.getIntegerState(state, 'last_breach_round')
      },
      get noticeboardAppId() {
        return DelegatorContractClient.getIntegerState(state, 'noticeboard_app_id')
      },
      get numBreach() {
        return DelegatorContractClient.getIntegerState(state, 'num_breach')
      },
      get partKeysDeposited() {
        return DelegatorContractClient.getIntegerState(state, 'part_keys_deposited')
      },
      get roundEnd() {
        return DelegatorContractClient.getIntegerState(state, 'round_end')
      },
      get roundStart() {
        return DelegatorContractClient.getIntegerState(state, 'round_start')
      },
      get selKey() {
        return DelegatorContractClient.getBinaryState(state, 'sel_key')
      },
      get stateProofKey() {
        return DelegatorContractClient.getBinaryState(state, 'state_proof_key')
      },
      get valAppId() {
        return DelegatorContractClient.getIntegerState(state, 'val_app_id')
      },
      get valConfigExtra() {
        return DelegatorContractClient.getBinaryState(state, 'val_config_extra')
      },
      get valConfigMan() {
        return DelegatorContractClient.getBinaryState(state, 'val_config_man')
      },
      get voteKey() {
        return DelegatorContractClient.getBinaryState(state, 'vote_key')
      },
      get voteKeyDilution() {
        return DelegatorContractClient.getIntegerState(state, 'vote_key_dilution')
      },
    }
  }

  public compose(): DelegatorContractComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain: Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setMandatory(
        args: MethodArgs<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.setMandatory(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      setExtra(args: MethodArgs<'set_extra((byte[30],byte[70]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.setExtra(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      depositKeys(
        args: MethodArgs<'deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.depositKeys(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      confirmKeys(
        args: MethodArgs<'confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.confirmKeys(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      stakeLimitBreach(args: MethodArgs<'stake_limit_breach()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.stakeLimitBreach(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      deregBreach(args: MethodArgs<'dereg_breach()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.deregBreach(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
        )
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          keysNotGenerated(args: MethodArgs<'keys_not_generated()(uint64,uint64)'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() =>
              client.delete.keysNotGenerated(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
            )
            resultMappers.push(Struct2UInt64)
            return $this
          },
          keysNotConfirmed(args: MethodArgs<'keys_not_confirmed()(uint64,uint64)'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() =>
              client.delete.keysNotConfirmed(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
            )
            resultMappers.push(Struct2UInt64)
            return $this
          },
          endContract(args: MethodArgs<'end_contract()(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() =>
              client.delete.endContract(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }),
            )
            resultMappers.push(Struct3UInt64)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(
        txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom,
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)),
        )
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue,
          ),
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => (resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)),
        }
      },
    } as unknown as DelegatorContractComposer
  }
}
export type DelegatorContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMandatory(
    args: MethodArgs<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): DelegatorContractComposer<
    [...TReturns, MethodReturn<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))void'>]
  >

  /**
   * Calls the set_extra((byte[30],byte[70]))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setExtra(
    args: MethodArgs<'set_extra((byte[30],byte[70]))void'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): DelegatorContractComposer<[...TReturns, MethodReturn<'set_extra((byte[30],byte[70]))void'>]>

  /**
   * Calls the deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositKeys(
    args: MethodArgs<'deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): DelegatorContractComposer<[...TReturns, MethodReturn<'deposit_keys(byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>]>

  /**
   * Calls the confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  confirmKeys(
    args: MethodArgs<'confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): DelegatorContractComposer<[...TReturns, MethodReturn<'confirm_keys(uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>]>

  /**
   * Calls the stake_limit_breach()bool ABI method.
   *
   * Anyone can trigger storing of a stake limit breach event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeLimitBreach(
    args: MethodArgs<'stake_limit_breach()bool'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): DelegatorContractComposer<[...TReturns, MethodReturn<'stake_limit_breach()bool'>]>

  /**
   * Calls the dereg_breach()bool ABI method.
   *
   * Work in progress
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deregBreach(
    args: MethodArgs<'dereg_breach()bool'>,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): DelegatorContractComposer<[...TReturns, MethodReturn<'dereg_breach()bool'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DelegatorContract smart contract using the keys_not_generated()(uint64,uint64) ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    keysNotGenerated(
      args: MethodArgs<'keys_not_generated()(uint64,uint64)'>,
      params?: AppClientComposeCallCoreParams,
    ): DelegatorContractComposer<[...TReturns, MethodReturn<'keys_not_generated()(uint64,uint64)'>]>
    /**
     * Deletes an existing instance of the DelegatorContract smart contract using the keys_not_confirmed()(uint64,uint64) ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    keysNotConfirmed(
      args: MethodArgs<'keys_not_confirmed()(uint64,uint64)'>,
      params?: AppClientComposeCallCoreParams,
    ): DelegatorContractComposer<[...TReturns, MethodReturn<'keys_not_confirmed()(uint64,uint64)'>]>
    /**
     * Deletes an existing instance of the DelegatorContract smart contract using the end_contract()(uint64,uint64,uint64) ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    endContract(
      args: MethodArgs<'end_contract()(uint64,uint64,uint64)'>,
      params?: AppClientComposeCallCoreParams,
    ): DelegatorContractComposer<[...TReturns, MethodReturn<'end_contract()(uint64,uint64,uint64)'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DelegatorContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom,
  ): DelegatorContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<DelegatorContractComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<DelegatorContractComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type DelegatorContractComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type DelegatorContractComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
