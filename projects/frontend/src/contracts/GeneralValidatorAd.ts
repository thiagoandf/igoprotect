/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "create(address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "val_config_man": {
          "name": "ValConfigMan",
          "elements": [
            [
              "hw_cat",
              "uint64"
            ],
            [
              "min_amt",
              "uint64"
            ],
            [
              "max_amt",
              "uint64"
            ],
            [
              "fee_setup",
              "uint64"
            ],
            [
              "fee_round",
              "uint64"
            ],
            [
              "deposit",
              "uint64"
            ],
            [
              "setup_rounds",
              "uint64"
            ],
            [
              "confirmation_rounds",
              "uint64"
            ],
            [
              "max_breach",
              "uint64"
            ],
            [
              "breach_rounds",
              "uint64"
            ],
            [
              "uptime_gar",
              "uint64"
            ]
          ]
        }
      }
    },
    "set_extra((byte[30],byte[70]))void": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "val_config_extra": {
          "name": "ValConfigExtra",
          "elements": [
            [
              "name",
              "byte[30]"
            ],
            [
              "link",
              "byte[70]"
            ]
          ]
        }
      }
    },
    "end_validator_ad()uint64": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "withdraw_earnings()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "keys_not_generated(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "keys_not_confirmed(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "end_delegator_contract(uint64)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Struct3UInt64",
          "elements": [
            [
              "a",
              "uint64"
            ],
            [
              "b",
              "uint64"
            ],
            [
              "c",
              "uint64"
            ]
          ]
        }
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZ2VuZXJhbF92YWxpZGF0b3JfYWQuY29udHJhY3QuR2VuZXJhbFZhbGlkYXRvckFkLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2VuZXJhbF92YWxpZGF0b3JfYWQvY29udHJhY3QucHk6NDktNTAKICAgIC8vICMgLS0tLS0tLSBTbWFydCBjb250cmFjdCAtLS0tLS0tCiAgICAvLyBjbGFzcyBHZW5lcmFsVmFsaWRhdG9yQWQoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "del_cnt": {
          "type": "uint64",
          "key": "del_cnt"
        },
        "del_contracts": {
          "type": "bytes",
          "key": "del_contracts"
        },
        "live": {
          "type": "uint64",
          "key": "live"
        },
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "max_del_cnt": {
          "type": "uint64",
          "key": "max_del_cnt"
        },
        "max_max_del_cnt": {
          "type": "uint64",
          "key": "max_max_del_cnt"
        },
        "noticeboard_app_id": {
          "type": "uint64",
          "key": "noticeboard_app_id"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "val_config_extra": {
          "type": "bytes",
          "key": "val_config_extra"
        },
        "val_config_man": {
          "type": "bytes",
          "key": "val_config_man"
        },
        "val_deposit": {
          "type": "uint64",
          "key": "val_deposit"
        },
        "val_earn_factor": {
          "type": "uint64",
          "key": "val_earn_factor"
        },
        "val_earnings": {
          "type": "uint64",
          "key": "val_earnings"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "GeneralValidatorAd",
    "desc": "\n    Ad of an validator to offer node running services to users.\n    Users, i.e. delegators, can open requests for the service and conclude an individual contract with this node runner.\n\n    Global state\n    ------------\n        Configuration parameters\n        ------------------------\n\n\n        Variables\n        ---------\n\n    Methods\n    -------\n\n    ",
    "methods": [
      {
        "name": "create",
        "args": [
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "uint64",
            "name": "noticeboard_app_id"
          },
          {
            "type": "uint64",
            "name": "val_earn_factor"
          },
          {
            "type": "uint64",
            "name": "deposit"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_mandatory",
        "args": [
          {
            "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
            "name": "val_config_man"
          },
          {
            "type": "bool",
            "name": "live"
          },
          {
            "type": "address",
            "name": "manager"
          },
          {
            "type": "uint64",
            "name": "max_del_cnt"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_extra",
        "args": [
          {
            "type": "(byte[30],byte[70])",
            "name": "val_config_extra"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "end_validator_ad",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "withdraw_earnings",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "create_delegator_contract",
        "args": [
          {
            "type": "uint64",
            "name": "deposit_payment_amount"
          },
          {
            "type": "uint64",
            "name": "fee_setup_payment_amount"
          },
          {
            "type": "address",
            "name": "del_acc"
          },
          {
            "type": "uint64",
            "name": "round_start"
          },
          {
            "type": "uint64",
            "name": "round_end"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "deposit_keys",
        "args": [
          {
            "type": "account",
            "name": "caller"
          },
          {
            "type": "uint64",
            "name": "del_app_id"
          },
          {
            "type": "byte[32]",
            "name": "sel_key"
          },
          {
            "type": "byte[32]",
            "name": "vote_key"
          },
          {
            "type": "byte[64]",
            "name": "state_proof_key"
          },
          {
            "type": "uint64",
            "name": "vote_key_dilution"
          },
          {
            "type": "uint64",
            "name": "round_start"
          },
          {
            "type": "uint64",
            "name": "round_end"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "confirm_keys",
        "args": [
          {
            "type": "uint64",
            "name": "del_app_id"
          },
          {
            "type": "uint64",
            "name": "fee_operation_payment_amount"
          },
          {
            "type": "byte[32]",
            "name": "sel_key"
          },
          {
            "type": "byte[32]",
            "name": "vote_key"
          },
          {
            "type": "byte[64]",
            "name": "state_proof_key"
          },
          {
            "type": "uint64",
            "name": "vote_key_dilution"
          },
          {
            "type": "uint64",
            "name": "round_start"
          },
          {
            "type": "uint64",
            "name": "round_end"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "keys_not_generated",
        "args": [
          {
            "type": "uint64",
            "name": "del_app_id"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "keys_not_confirmed",
        "args": [
          {
            "type": "uint64",
            "name": "del_app_id"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "end_delegator_contract",
        "args": [
          {
            "type": "uint64",
            "name": "del_app_id"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the GeneralValidatorAd smart contract.
 */
export type GeneralValidatorAd = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(address,uint64,uint64,uint64)void' | 'create', {
      argsObj: {
        owner: string
        noticeboardAppId: bigint | number
        valEarnFactor: bigint | number
        deposit: bigint | number
      }
      argsTuple: [owner: string, noticeboardAppId: bigint | number, valEarnFactor: bigint | number, deposit: bigint | number]
      returns: void
    }>
    & Record<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void' | 'set_mandatory', {
      argsObj: {
        valConfigMan: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number]
        live: boolean
        manager: string
        maxDelCnt: bigint | number
      }
      argsTuple: [valConfigMan: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number], live: boolean, manager: string, maxDelCnt: bigint | number]
      returns: void
    }>
    & Record<'set_extra((byte[30],byte[70]))void' | 'set_extra', {
      argsObj: {
        valConfigExtra: [Uint8Array, Uint8Array]
      }
      argsTuple: [valConfigExtra: [Uint8Array, Uint8Array]]
      returns: void
    }>
    & Record<'end_validator_ad()uint64' | 'end_validator_ad', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'withdraw_earnings()uint64' | 'withdraw_earnings', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64' | 'create_delegator_contract', {
      argsObj: {
        depositPaymentAmount: bigint | number
        feeSetupPaymentAmount: bigint | number
        delAcc: string
        roundStart: bigint | number
        roundEnd: bigint | number
      }
      argsTuple: [depositPaymentAmount: bigint | number, feeSetupPaymentAmount: bigint | number, delAcc: string, roundStart: bigint | number, roundEnd: bigint | number]
      returns: bigint
    }>
    & Record<'deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64' | 'deposit_keys', {
      argsObj: {
        caller: string | Uint8Array
        delAppId: bigint | number
        selKey: Uint8Array
        voteKey: Uint8Array
        stateProofKey: Uint8Array
        voteKeyDilution: bigint | number
        roundStart: bigint | number
        roundEnd: bigint | number
      }
      argsTuple: [caller: string | Uint8Array, delAppId: bigint | number, selKey: Uint8Array, voteKey: Uint8Array, stateProofKey: Uint8Array, voteKeyDilution: bigint | number, roundStart: bigint | number, roundEnd: bigint | number]
      returns: bigint
    }>
    & Record<'confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64' | 'confirm_keys', {
      argsObj: {
        delAppId: bigint | number
        feeOperationPaymentAmount: bigint | number
        selKey: Uint8Array
        voteKey: Uint8Array
        stateProofKey: Uint8Array
        voteKeyDilution: bigint | number
        roundStart: bigint | number
        roundEnd: bigint | number
      }
      argsTuple: [delAppId: bigint | number, feeOperationPaymentAmount: bigint | number, selKey: Uint8Array, voteKey: Uint8Array, stateProofKey: Uint8Array, voteKeyDilution: bigint | number, roundStart: bigint | number, roundEnd: bigint | number]
      returns: bigint
    }>
    & Record<'keys_not_generated(uint64)uint64' | 'keys_not_generated', {
      argsObj: {
        delAppId: bigint | number
      }
      argsTuple: [delAppId: bigint | number]
      returns: bigint
    }>
    & Record<'keys_not_confirmed(uint64)uint64' | 'keys_not_confirmed', {
      argsObj: {
        delAppId: bigint | number
      }
      argsTuple: [delAppId: bigint | number]
      returns: bigint
    }>
    & Record<'end_delegator_contract(uint64)(uint64,uint64,uint64)' | 'end_delegator_contract', {
      argsObj: {
        delAppId: bigint | number
      }
      argsTuple: [delAppId: bigint | number]
      returns: Struct3UInt64
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      delCnt?: IntegerState
      delContracts?: BinaryState
      live?: IntegerState
      manager?: BinaryState
      maxDelCnt?: IntegerState
      maxMaxDelCnt?: IntegerState
      noticeboardAppId?: IntegerState
      owner?: BinaryState
      valConfigExtra?: BinaryState
      valConfigMan?: BinaryState
      valDeposit?: IntegerState
      valEarnFactor?: IntegerState
      valEarnings?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type GeneralValidatorAdSig = keyof GeneralValidatorAd['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends GeneralValidatorAdSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a ValConfigMan result as a struct
 */
export type ValConfigMan = {
  hwCat: bigint
  minAmt: bigint
  maxAmt: bigint
  feeSetup: bigint
  feeRound: bigint
  deposit: bigint
  setupRounds: bigint
  confirmationRounds: bigint
  maxBreach: bigint
  breachRounds: bigint
  uptimeGar: bigint
}
/**
 * Converts the tuple representation of a ValConfigMan to the struct representation
 */
export function ValConfigMan([hwCat, minAmt, maxAmt, feeSetup, feeRound, deposit, setupRounds, confirmationRounds, maxBreach, breachRounds, uptimeGar]: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] ) {
  return {
    hwCat,
    minAmt,
    maxAmt,
    feeSetup,
    feeRound,
    deposit,
    setupRounds,
    confirmationRounds,
    maxBreach,
    breachRounds,
    uptimeGar,
  }
}
/**
 * Represents a ValConfigExtra result as a struct
 */
export type ValConfigExtra = {
  name: Uint8Array
  link: Uint8Array
}
/**
 * Converts the tuple representation of a ValConfigExtra to the struct representation
 */
export function ValConfigExtra([name, link]: [Uint8Array, Uint8Array] ) {
  return {
    name,
    link,
  }
}
/**
 * Represents a Struct3UInt64 result as a struct
 */
export type Struct3UInt64 = {
  a: bigint
  b: bigint
  c: bigint
}
/**
 * Converts the tuple representation of a Struct3UInt64 to the struct representation
 */
export function Struct3UInt64([a, b, c]: [bigint, bigint, bigint] ) {
  return {
    a,
    b,
    c,
  }
}
/**
 * Maps a method signature from the GeneralValidatorAd smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends GeneralValidatorAdSig> = GeneralValidatorAd['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GeneralValidatorAd smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GeneralValidatorAdSig> = GeneralValidatorAd['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type GeneralValidatorAdCreateCalls = (typeof GeneralValidatorAdCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type GeneralValidatorAdCreateCallParams =
  | (TypedCallParams<'create(address,uint64,uint64,uint64)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type GeneralValidatorAdDeleteCalls = (typeof GeneralValidatorAdCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type GeneralValidatorAdDeleteCallParams =
  | TypedCallParams<'end_validator_ad()uint64'>
/**
 * Defines arguments required for the deploy method.
 */
export type GeneralValidatorAdDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: GeneralValidatorAdCreateCalls) => GeneralValidatorAdCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: GeneralValidatorAdDeleteCalls) => GeneralValidatorAdDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class GeneralValidatorAdCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the GeneralValidatorAd smart contract using the create(address,uint64,uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(args: MethodArgs<'create(address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'create(address,uint64,uint64,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.owner, args.noticeboardAppId, args.valEarnFactor, args.deposit],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the GeneralValidatorAd smart contract using the end_validator_ad()uint64 ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      endValidatorAd(args: MethodArgs<'end_validator_ad()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'end_validator_ad()uint64' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setMandatory(args: MethodArgs<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valConfigMan, args.live, args.manager, args.maxDelCnt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_extra((byte[30],byte[70]))void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setExtra(args: MethodArgs<'set_extra((byte[30],byte[70]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_extra((byte[30],byte[70]))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valConfigExtra],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw_earnings()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawEarnings(args: MethodArgs<'withdraw_earnings()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw_earnings()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createDelegatorContract(args: MethodArgs<'create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.depositPaymentAmount, args.feeSetupPaymentAmount, args.delAcc, args.roundStart, args.roundEnd],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static depositKeys(args: MethodArgs<'deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.caller, args.delAppId, args.selKey, args.voteKey, args.stateProofKey, args.voteKeyDilution, args.roundStart, args.roundEnd],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static confirmKeys(args: MethodArgs<'confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.delAppId, args.feeOperationPaymentAmount, args.selKey, args.voteKey, args.stateProofKey, args.voteKeyDilution, args.roundStart, args.roundEnd],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_not_generated(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysNotGenerated(args: MethodArgs<'keys_not_generated(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_not_generated(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.delAppId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_not_confirmed(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysNotConfirmed(args: MethodArgs<'keys_not_confirmed(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_not_confirmed(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.delAppId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the end_delegator_contract(uint64)(uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static endDelegatorContract(args: MethodArgs<'end_delegator_contract(uint64)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'end_delegator_contract(uint64)(uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.delAppId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the GeneralValidatorAd smart contract
 */
export class GeneralValidatorAdClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `GeneralValidatorAdClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof GeneralValidatorAd['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the GeneralValidatorAd smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: GeneralValidatorAdDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(GeneralValidatorAdCallFactory.create)
    const deleteArgs = params.deleteCall?.(GeneralValidatorAdCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the GeneralValidatorAd smart contract using the create(address,uint64,uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(args: MethodArgs<'create(address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'create(address,uint64,uint64,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(GeneralValidatorAdCallFactory.create.create(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the GeneralValidatorAd smart contract using the end_validator_ad()uint64 ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async endValidatorAd(args: MethodArgs<'end_validator_ad()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'end_validator_ad()uint64'>>(await $this.appClient.delete(GeneralValidatorAdCallFactory.delete.endValidatorAd(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the GeneralValidatorAd smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setMandatory(args: MethodArgs<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GeneralValidatorAdCallFactory.setMandatory(args, params))
  }

  /**
   * Calls the set_extra((byte[30],byte[70]))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setExtra(args: MethodArgs<'set_extra((byte[30],byte[70]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GeneralValidatorAdCallFactory.setExtra(args, params))
  }

  /**
   * Calls the withdraw_earnings()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawEarnings(args: MethodArgs<'withdraw_earnings()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GeneralValidatorAdCallFactory.withdrawEarnings(args, params))
  }

  /**
   * Calls the create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createDelegatorContract(args: MethodArgs<'create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GeneralValidatorAdCallFactory.createDelegatorContract(args, params))
  }

  /**
   * Calls the deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public depositKeys(args: MethodArgs<'deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GeneralValidatorAdCallFactory.depositKeys(args, params))
  }

  /**
   * Calls the confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public confirmKeys(args: MethodArgs<'confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GeneralValidatorAdCallFactory.confirmKeys(args, params))
  }

  /**
   * Calls the keys_not_generated(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public keysNotGenerated(args: MethodArgs<'keys_not_generated(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GeneralValidatorAdCallFactory.keysNotGenerated(args, params))
  }

  /**
   * Calls the keys_not_confirmed(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public keysNotConfirmed(args: MethodArgs<'keys_not_confirmed(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GeneralValidatorAdCallFactory.keysNotConfirmed(args, params))
  }

  /**
   * Calls the end_delegator_contract(uint64)(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public endDelegatorContract(args: MethodArgs<'end_delegator_contract(uint64)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GeneralValidatorAdCallFactory.endDelegatorContract(args, params), Struct3UInt64)
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<GeneralValidatorAd['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get delCnt() {
        return GeneralValidatorAdClient.getIntegerState(state, 'del_cnt')
      },
      get delContracts() {
        return GeneralValidatorAdClient.getBinaryState(state, 'del_contracts')
      },
      get live() {
        return GeneralValidatorAdClient.getIntegerState(state, 'live')
      },
      get manager() {
        return GeneralValidatorAdClient.getBinaryState(state, 'manager')
      },
      get maxDelCnt() {
        return GeneralValidatorAdClient.getIntegerState(state, 'max_del_cnt')
      },
      get maxMaxDelCnt() {
        return GeneralValidatorAdClient.getIntegerState(state, 'max_max_del_cnt')
      },
      get noticeboardAppId() {
        return GeneralValidatorAdClient.getIntegerState(state, 'noticeboard_app_id')
      },
      get owner() {
        return GeneralValidatorAdClient.getBinaryState(state, 'owner')
      },
      get valConfigExtra() {
        return GeneralValidatorAdClient.getBinaryState(state, 'val_config_extra')
      },
      get valConfigMan() {
        return GeneralValidatorAdClient.getBinaryState(state, 'val_config_man')
      },
      get valDeposit() {
        return GeneralValidatorAdClient.getIntegerState(state, 'val_deposit')
      },
      get valEarnFactor() {
        return GeneralValidatorAdClient.getIntegerState(state, 'val_earn_factor')
      },
      get valEarnings() {
        return GeneralValidatorAdClient.getIntegerState(state, 'val_earnings')
      },
    }
  }

  public compose(): GeneralValidatorAdComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setMandatory(args: MethodArgs<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setMandatory(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setExtra(args: MethodArgs<'set_extra((byte[30],byte[70]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setExtra(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawEarnings(args: MethodArgs<'withdraw_earnings()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawEarnings(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createDelegatorContract(args: MethodArgs<'create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createDelegatorContract(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      depositKeys(args: MethodArgs<'deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.depositKeys(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      confirmKeys(args: MethodArgs<'confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.confirmKeys(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      keysNotGenerated(args: MethodArgs<'keys_not_generated(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysNotGenerated(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      keysNotConfirmed(args: MethodArgs<'keys_not_confirmed(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysNotConfirmed(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      endDelegatorContract(args: MethodArgs<'end_delegator_contract(uint64)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.endDelegatorContract(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Struct3UInt64)
        return this
      },
      get delete() {
        const $this = this
        return {
          endValidatorAd(args: MethodArgs<'end_validator_ad()uint64'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.endValidatorAd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as GeneralValidatorAdComposer
  }
}
export type GeneralValidatorAdComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setMandatory(args: MethodArgs<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'set_mandatory((uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),bool,address,uint64)void'>]>

  /**
   * Calls the set_extra((byte[30],byte[70]))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setExtra(args: MethodArgs<'set_extra((byte[30],byte[70]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'set_extra((byte[30],byte[70]))void'>]>

  /**
   * Calls the withdraw_earnings()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawEarnings(args: MethodArgs<'withdraw_earnings()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'withdraw_earnings()uint64'>]>

  /**
   * Calls the create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDelegatorContract(args: MethodArgs<'create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'create_delegator_contract(uint64,uint64,address,uint64,uint64)uint64'>]>

  /**
   * Calls the deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositKeys(args: MethodArgs<'deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'deposit_keys(account,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>]>

  /**
   * Calls the confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  confirmKeys(args: MethodArgs<'confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'confirm_keys(uint64,uint64,byte[32],byte[32],byte[64],uint64,uint64,uint64)uint64'>]>

  /**
   * Calls the keys_not_generated(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysNotGenerated(args: MethodArgs<'keys_not_generated(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'keys_not_generated(uint64)uint64'>]>

  /**
   * Calls the keys_not_confirmed(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysNotConfirmed(args: MethodArgs<'keys_not_confirmed(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'keys_not_confirmed(uint64)uint64'>]>

  /**
   * Calls the end_delegator_contract(uint64)(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  endDelegatorContract(args: MethodArgs<'end_delegator_contract(uint64)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'end_delegator_contract(uint64)(uint64,uint64,uint64)'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the GeneralValidatorAd smart contract using the end_validator_ad()uint64 ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    endValidatorAd(args: MethodArgs<'end_validator_ad()uint64'>, params?: AppClientComposeCallCoreParams): GeneralValidatorAdComposer<[...TReturns, MethodReturn<'end_validator_ad()uint64'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the GeneralValidatorAd smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): GeneralValidatorAdComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): GeneralValidatorAdComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<GeneralValidatorAdComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<GeneralValidatorAdComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type GeneralValidatorAdComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type GeneralValidatorAdComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
